{
  
    
        "post0": {
            "title": "Random Forest from scratch",
            "content": "Random Forest from scratch . Random Forest is a parallel ensembling algorithm in which each estimator (tree) receives different samples and features. This leads to different error distributions for each estimator which in turn makes the learning process more efficient and generalizable. The final prediction is the mean of all trees&#39; predictions. The parallel nature of this algorithm makes it super fast in comparison with boosting algorithms like XGBoost. . import math import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.metrics import r2_score . Tree Ensemble Class . In this section, we need to develop the Bagging (Bootstrap Aggregation) Ensembling algorithm. The key point is that we do not need to implement the Decision Tree at this stage. We assume that we already have it, and we focus on the ensembling class. Here, we only implemented subsampling among different RF parameters. . class TreeEnsemble(): def __init__(self,x,y,n_trees,sample_sz,min_leaf=5): np.random.seed(42) self.x,self.y=x.reset_index().drop([&#39;index&#39;],axis=1),y.reset_index().drop([&#39;index&#39;],axis=1) self.sample_sz,self.min_leaf = sample_sz,min_leaf self.trees=[self.create_tree() for i in range(n_trees)] def create_tree(self): rnd_idxs=np.random.permutation(len(self.y))[:self.sample_sz] return DecisionTree(self.x.iloc[rnd_idxs], self.y.reindex(rnd_idxs), idxs=np.array(range(self.sample_sz)), min_leaf=self.min_leaf) def predict(self, x): # axis=0 will average it across the list return np.mean([t.predict(x) for t in self.trees], axis=0) def std_agg(cnt,s1,s2): return math.sqrt(((s2/cnt) - (s1/cnt)**2)) . Decision Tree Class . For each tree, we find the features with better information gain (reducing entropy). To this end, we need to find optimal split points for each feature. There will be more descriptions for this section in the future. . class DecisionTree(): def __init__(self,x,y, idxs=None,min_leaf=5): if idxs is None: idxs=np.arange(len(y)) self.x,self.y,self.idxs,self.min_leaf=x,y,idxs,min_leaf self.n,self.c = len(idxs), x.shape[1] self.val= np.mean(y.to_numpy()[idxs]) self.shir=y.isnull().sum() self.score= float(&#39;inf&#39;) self.find_varsplit() def find_varsplit(self): for i in range(self.c): self.find_better_split(i) if self.score == float(&#39;inf&#39;): return x= self.split_col lhs=np.nonzero(x&lt;=self.split)[0] rhs=np.nonzero(x&gt;self.split)[0] self.lhs=DecisionTree(self.x,self.y,self.idxs[lhs]) self.rhs=DecisionTree(self.x,self.y,self.idxs[rhs]) def find_better_split(self, var_idx): x, y= self.x.to_numpy()[self.idxs,var_idx], self.y.to_numpy()[self.idxs] sort_idx=np.argsort(x) sort_y,sort_x = y[sort_idx], x[sort_idx] rhs_cnt, rhs_sum, rhs_sum2 = self.n, sort_y.sum(), (sort_y**2).sum() lhs_cnt, lhs_sum, lhs_sum2 = 0, 0., 0. for i in range(0,self.n-self.min_leaf-1): xi, yi= sort_x[i], sort_y[i] rhs_cnt -=1; lhs_cnt += 1 rhs_sum -= yi; lhs_sum += yi rhs_sum2-=yi**2; lhs_sum2 +=yi**2 if i&lt;self.min_leaf or xi==sort_x[i+1]: continue rhs_std= std_agg(rhs_cnt, rhs_sum, rhs_sum2) lhs_std= std_agg(lhs_cnt, lhs_sum, lhs_sum2) corr_score= rhs_std+lhs_std if corr_score&lt; self.score: self.score, self.var_idx, self.split = corr_score, var_idx, xi def predict(self,x): return np.array([self.predict_row(xi) for xi in x.to_numpy()]) def predict_row(self,xi): if self.is_leaf: return self.val t = self.lhs if xi[self.var_idx]&lt;=self.split else self.rhs return t.predict_row(xi) @property def split_name(self): return self.x.columns[self.var_idx] @property def split_col(self): return self.x.values[self.idxs,self.var_idx] @property def is_leaf(self): return self.score== float(&#39;inf&#39;) def __repr__(self): s= f&#39;n: {self.n}; val: {self.val}&#39; if not self.is_leaf: s+= f&#39;; score:{self.score}; split:{self.split}; var:{self.split_name}&#39; return s . plt.style.use(&#39;seaborn&#39;) PATH_DATA = &quot;./data/&quot; house = pd.read_csv(PATH_DATA + &quot;boston_house_prices.csv&quot;, header=1) x = house.drop(house.MEDV.name, axis=1) y = house.MEDV x_train, x_test, y_train, y_test = train_test_split(x,y,shuffle=True,random_state=101,test_size=0.3) . tree=TreeEnsemble(x_train, y_train,20,250); r2_score(y_test,tree.predict(x_test)) . 0.746876960824918 . OK, 0.74, not so bad! . plt.scatter(tree.predict(x_test),y_test); . Using Sklearn Random Forest . in order to compare models, we use the Random Forest of Scikit Learn library. . from sklearn.ensemble import RandomForestRegressor rf = RandomForestRegressor(n_estimators=20) rf.fit(x_train, y_train) rf.score(x_test, y_test) . 0.8569015535244505 . The result is evidently more accurate. The reason is that in the from_scratch version, we only implemented subsampling among different RF parameters. But the sklearn version is the complete version of Random Forest. We can implement more parameters to see the results. .",
            "url": "https://mtismt.github.io/blog/jupyter/2022/09/09/RandomForestFromScratch.html",
            "relUrl": "/jupyter/2022/09/09/RandomForestFromScratch.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mtismt.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mtismt.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am the Co-Founder and CEO of Fitech1. My LinkedIn account. .",
          "url": "https://mtismt.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mtismt.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}